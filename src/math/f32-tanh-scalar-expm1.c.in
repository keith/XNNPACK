// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$import math
$assert LOG2LUT in [0, 2, 3, 4, 5, 6]
$assert P == H + 1
$LUT = 1 << LOG2LUT
#include <assert.h>
#include <stddef.h>
#include <stdint.h>
#include <math.h>

#include <xnnpack/common.h>
#include <xnnpack/math.h>
#include <xnnpack/math-stubs.h>

$if LOG2LUT != 0:

  // Table of exp2(k / ${LUT}) values decremented (as integer) by (k << ${23-LOG2LUT}), k = 0..${LUT-1}
  extern XNN_INTERNAL const uint32_t xnn_table_exp2minus_k_over_${LUT}[${LUT}];

$if LOG2LUT == 0:
  $COEFFS = {6: ["0x1.FFFFFEp+0", "-0x1.5554B0p+0", "0x1.555716p-1", "-0x1.12278Ep-2", "0x1.6B7338p-4"]}[P]
$elif LOG2LUT == 2:
  $COEFFS = {4: ["0x1.000002p+1", "-0x1.557082p+0", "0x1.554F9Ap-1"]}[P]
$elif LOG2LUT == 3:
  $COEFFS = {3: ["0x1.0007ACp+1", "-0x1.555862p+0"], 4: ["0x1.000000p+1", "-0x1.555C20p+0", "0x1.5558ECp-1"]}[P]
$elif LOG2LUT == 4:
  $COEFFS = {3: ["0x1.0001ECp+1", "-0x1.55561Cp+0"], 4: ["0x1.000000p+1", "-0x1.555708p+0", "0x1.55563Ap-1"]}[P]
$elif LOG2LUT == 5:
  $COEFFS = {3: ["0x1.00007Ap+1", "-0x1.555582p+0"]}[P]
$elif LOG2LUT == 6:
  $COEFFS = {3: ["0x1.00001Ep+1", "-0x1.55555Ep+0"]}[P]
$POLYNOMIAL = "c%d" % (len(COEFFS) + 1)
$for i in reversed(range(len(COEFFS)-1)):
$  POLYNOMIAL = "(c%d + t * %s)" % (i+2, POLYNOMIAL)
$POLYNOMIAL = "(-2 + t * %s)" % POLYNOMIAL
$LUT_SUFFIX = "" if LOG2LUT == 0 else "lut%d_" % LUT
$POLY_SUFFIX = "p%dh%d_" % (P, H)
void xnn_math_f32_tanh__scalar_expm1_rr1_${LUT_SUFFIX}${POLY_SUFFIX}div(
    size_t n,
    const float* input,
    float* output)
{
  assert(n % sizeof(float) == 0);

  $if LOG2LUT == 0:
    // Large number such that ulp(magic bias) == 0.5 and magic bias === 63.5 mod 2**21.
    const float vmagic_bias = 0x1.8000FEp+22f;
  $else:
    // Large number such that ulp(magic bias) == exp2(${-1-LOG2LUT})
    const float vmagic_bias = 0x1.800000p${22-LOG2LUT}f;
  const float vminus_log2e = -0x1.715476p+0f;
  $if LOG2LUT != 0:
    // Mask for the lowest ${LOG2LUT} bits
    const uint32_t vindex_mask = UINT32_C(0x${"%X" % (LUT-1)});
  const float vln2 = 0x1.62E430p-1f;
  // Coefficient of polynomial approximation
  //   exp(-2t) - 1 ~ t * ${POLYNOMIAL}
  // on [-log(2)/${4*LUT}, log(2)/${4*LUT}]
  $for i in reversed(range(len(COEFFS))):
    const float vc${2+i} = ${COEFFS[i]}f;
  const float vminus_two = -2.0f;
  const float vone = 1.0f;
  // The smallest z for which tanhf(-z) is saturated at -1.0f.
  const float vsat_cutoff = 0x1.205968p+3f;

  for (; n != 0; n -= sizeof(float)) {
    const float vx = *input++;

    // General structure of the algorithm:
    //
    //           / -expm1(-2x) / (2 + expm1(-2x)) if x >= 0
    //   f(x) :=
    //           \ -f(-x) if x <= 0
    //
    // First we compute y := expm1(-2z) / (2 + expm1(-2z)) where z = abs(x),
    // then set its sign according to the sign of x: f(x) := sign(x) * abs(y).
    const float vz = fabsf(vx);

    // Compute reduced argument n := round(-z / log(2), ${1+LOG2LUT}).
    // We do it by adding a large number (magic bias), which cause rounding of the result to ${1+LOG2LUT} fractional ${"bit" if LOG2LUT == 0 else "bits"},
    // then subtracing the large number back. The trick with adding large number is valid only within certain bounds
    // (|-z / log(2)| <= 2**${21-LOG2LUT}, i.e. |z| <= 0x1.62E43p+${20-LOG2LUT} = ${math.ldexp(float.fromhex("0x1.62E43p+20"), -LOG2LUT)}), but that is acceptable, because inputs x
    // outside of [-9.010913, 9.010913] (i.e. z outsize [0, 9.010913]) saturate tanhf(x).
    $if LOG2LUT == 0:
      // Additionally, we fuse addition of the floating-point exponent bias (127) into the magic bias.
    // Note that addition-subtraction of the large number doesn't cause overflow for inputs in this range.
    float vn = vz * vminus_log2e + vmagic_bias;

    $if LOG2LUT == 0:
      // Create a floating-point number s (scale) such that s == 2**(2n) for inputs which don't cause underflow, i.e.
      // 0 <= z <= 9.010913, and -13 <= n <= 0 accordingly.
      const float vs = uint32_as_float(float_as_uint32(vn) << 23);
    $else:
      // Create a floating-point number s (scale) such that s := 2**(2n) for valid inputs, i.e. 0 <= z <= 9.010913. As
      // n has ${1+LOG2LUT} fractional bits, we split s == 2**(2n) = 2**int(2n) * 2**frac(2n). We create s in two steps:
      // 1. Fetch 2**frac(2n) from the table using the ${LOG2LUT} low bits of n, as integer. Note that the fetched values are in
      //    the [1.0, 2.0) range, i.e. their unbiased floating-point exponent is 0.
      // 2. Adjust fetched value by addition of int(2n) to its floating-point exponent. The result is always a normalized
      //    number, because for 0 <= z <= 9.010913 we have -13 <= int(n) <= 0, and thus the adjusted exponent is not
      //    lower than -13.
      //
      // Shift bits ${LOG2LUT}:${LOG2LUT+8} into 23:31 (position of floating-point exponent).
      const uint32_t vnb = float_as_uint32(vn);
      const uint32_t ve = vnb << ${23-LOG2LUT};

      // Use bits 0:${LOG2LUT} bits of n, as integer, as an index for table lookup of l := 2**frac(n).
      const uint32_t vidx = vnb & vindex_mask;
      const uint32_t vl = xnn_table_exp2minus_k_over_${LUT}[vidx];

      // Adjust exponent of the value l fetched from the table to get the final s value.
      const float vs = uint32_as_float(vl + ve);

    // Subtract the large number back to get final n := round(-z / log(2), ${1+LOG2LUT}) as a floating-point number.
    vn -= vmagic_bias;

    // Compute reduced argument t := z + n * log(2). Note that -t = -z - n * log(2).
    const float vt = vn * vln2 + vz;

    // Compute degree-${1+len(COEFFS)} polynomial approximation for exp(-2t) - 1 on [-log(2)/${4*LUT}, log(2)/${4*LUT}].
    //   P(t) = t * ${POLYNOMIAL}
    //        = t * p
    float vp = vc${1+len(COEFFS)} * vt + vc${len(COEFFS)};
    $for i in reversed(range(len(COEFFS)-2)):
      vp = vp * vt + vc${2+i};
    vp = vp * vt + vminus_two;

    // Reconstruct the exp(-2z) - 1 value:
    //   exp(-2z) - 1 = s * (t * ${POLYNOMIAL} + 1) - 1
    //                = s * t * p + (s - 1)
    //                = (s - 1) + (t * s) * p
    const float vts = vt * vs;
    const float vsm1 = vs - vone;
    const float vem1 = vp * vts + vsm1;

    // Reconstruct y = expm1(-2z) / (expm1(-2z) + 2)
    const float vep1 = vem1 - vminus_two;
    float vy = vem1 / vep1;

    // The function tanh(z) saturates at -1 for large inputs: tanhf(z) == -1.0f for z >= sat_cutoff ~= 9.010913.
    // Note that we use +1.0 instead of -1.0, because sign will be copied from the input in the next step.
    if XNN_UNPREDICTABLE(vz >= vsat_cutoff) {
      vy = vone;
    }

    // Reconstruct tanh(x) = copysign(y, x)
    vy = copysignf(vy, vx);

    *output++ = vy;
  }
}
